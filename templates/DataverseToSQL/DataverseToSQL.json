{"$schema":"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#","contentVersion":"1.0.0.0","parameters":{"factoryName":{"type":"string","metadata":"Data Factory name"},"AzureSqlDatabaseSALabDataverseSQL":{"type":"string"},"AzureDataLakeStorage_devorg2_unq3cd674d243f4ec11811d0022480cd":{"type":"string"}},"variables":{"factoryId":"[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"},"resources":[{"name":"[concat(parameters('factoryName'), '/DataverseToSQL')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"description":"Once you have Synapse Link for Dataverse set up with incremental updates, use this template to copy data from ADLS Gen 2 to an Azure SQL Database. This template is usable in both Azure Data Factory and Azure Synapse Analytics.","activities":[{"name":"LookupModelJson","description":"Read model.json file to retrieve metadata","type":"Lookup","dependsOn":[],"policy":{"timeout":"7.00:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"JsonSource","storeSettings":{"type":"AzureBlobFSReadSettings","recursive":false,"enablePartitionDiscovery":false},"formatSettings":{"type":"JsonReadSettings"}},"dataset":{"referenceName":"modelJson","type":"DatasetReference","parameters":{"container":{"value":"@pipeline().parameters.container","type":"Expression"},"folder":{"value":"@pipeline().parameters.folder","type":"Expression"}}}}},{"name":"ForEachEntity","description":"Loop for each entity in model.json file.","type":"ForEach","dependsOn":[{"activity":"LookupModelJson","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"items":{"value":"@activity('LookupModelJson').output.firstRow.entities","type":"Expression"},"batchCount":4,"activities":[{"name":"CreateTable","description":"Create or alter table to destination SQL DB","type":"Script","dependsOn":[],"policy":{"timeout":"0.0:10:00","retry":2,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[{"name":"tablename","value":"@{item().name}"}],"linkedServiceName":{"referenceName":"[parameters('AzureSqlDatabaseSALabDataverseSQL')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"NonQuery","text":{"value":"Declare @attributes nvarchar(max) =replace(replace('@{item().attributes}', '\\',''), 'cdm:traits', 'traits') ;\ndeclare @entity nvarchar(200) = '@{item().name}';\n\ndeclare @metadata table (Name nvarchar(200), datatype NVARCHAR(50), maxLength int, precision int, scale int, datatypeSQL nvarchar(100));\n\ninsert into @metadata\nselect   \n x.Name,  x.dataType,  x.maxLength,  x.precision,  x.scale,  \n case    \n when x.dataType = 'nvarchar' and x.maxLength < 0 then 'nvarchar(max)'  \n when x.datatype = 'nvarchar' and x.maxLength > 0 then 'nvarchar(' + convert(nvarchar(10), x.maxLength) + ')'\n when x.datatype = 'decimal' then 'decimal(' + convert(nvarchar(10), x.precision) + ',' + convert(nvarchar(10), x.scale)+ ')'  \n else x.datatype end as datatypeSQL  \n from ( \n select Name,   \n case datatype     \n when 'guid' then 'UNIQUEIDENTIFIER'    \n when 'string' then 'nvarchar'    \n when 'int64' then 'bigInt'    \n when 'boolean' then 'bit'   \n when 'double' then 'real'    \n else datatype end as dataType,    \n case    when datatype = 'string' and  maxLength > 4000 then -1    \n when datatype = 'string'  then maxLength end as maxLength,   \n case  when datatype = 'decimal' then precision end as precision,   \n case  when datatype = 'decimal' then scale end as scale   \n FROM OPENJSON(@attributes)  WITH (  name nvarchar(200) '$.name',  datatype NVARCHAR(50) '$.dataType' , maxLength int '$.maxLength' ,precision int '$.traits[0].arguments[0].value' ,scale int '$.traits[0].arguments[1].value')  )x ; \n \n \n\nDeclare @CreateTableDDL nvarchar(max) = (SELECT \n'IF OBJECT_ID(''dbo.' + @entity + ''',''U'') IS NULL \ncreate table ' + @entity + '(' + STRING_AGG(CONVERT(NVARCHAR(max), + '[' + name + '] ' +  datatypeSQL) , ',') + ' \n, CONSTRAINT ' + @entity + '_ID PRIMARY KEY CLUSTERED (Id)' + ')' \nfrom @metadata);\n\n execute sp_executesql  @CreateTableDDL;\n\n  -- add Columns\nDeclare @AlterTableAddColumnDDL nvarchar(max) = (SELECT \n'alter table ' + @entity + ' ADD ' + STRING_AGG(CONVERT(NVARCHAR(max), + '[' + name + '] ' +  datatypeSQL), ',')\nfrom @metadata m\nleft join  INFORMATION_SCHEMA.COLUMNS c on \nc.TABLE_NAME = @entity and TABLE_SCHEMA = 'dbo'\nand c.COLUMN_NAME = m.Name\nwhere c.COLUMN_NAME is null);\n\n\nexecute sp_executesql @AlterTableAddColumnDDL;\n--select @AlterTableAddColumnDDL;\n\nDeclare @AlterTableAlterColumnDDL nvarchar(max) = (SELECT \n  STRING_AGG(CONVERT(NVARCHAR(max), + 'alter table ' + @entity + ' ALTER COLUMN ' + '[' + name + '] ' +  datatypeSQL), ';')\nfrom @metadata m\nleft join  INFORMATION_SCHEMA.COLUMNS c on \nc.TABLE_NAME = @entity and TABLE_SCHEMA = 'dbo'\nand c.COLUMN_NAME = name\nwhere c.COLUMN_NAME is not null and (c.Data_type != datatype or c.CHARACTER_MAXIMUM_LENGTH != maxLength or NUMERIC_PRECISION != precision or NUMERIC_SCALE != scale));\n\nexecute sp_executesql @AlterTableAlterColumnDDL;\n--select @AlterTableAlterColumnDDL;\n\nDeclare @CreateLogTableDDL nvarchar(max) =\n'IF OBJECT_ID(''dbo.DeleteLog'',''U'') IS NULL \nCREATE TABLE [dbo].[DeleteLog](\n\t[Id] [bigint] IDENTITY(1,1) NOT NULL,\n\t[EntityName] [nvarchar](64) NOT NULL,\n\t[RecordId] [nvarchar](64) NOT NULL,\n\t[SinkDeleteTime] [datetime] NOT NULL,\n\t[VersionNumber] [bigint] NOT NULL,\nPRIMARY KEY CLUSTERED \n(\n\t[Id] ASC\n)\n) ON [PRIMARY]';\n\nexecute sp_executesql  @CreateLogTableDDL;","type":"Expression"}}]}},{"name":"IfPartitionsExists","description":"If data partition exists, then copy the data","type":"IfCondition","dependsOn":[{"activity":"CreateTable","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"expression":{"value":"@greater(length(item().partitions),0)\n","type":"Expression"},"ifTrueActivities":[{"name":"DataverseToSQL","description":"Copy the CDM data to SQL table","type":"ExecuteDataFlow","dependsOn":[],"policy":{"timeout":"1.00:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[{"name":"tablename","value":"@{item().name}"}],"typeProperties":{"dataflow":{"referenceName":"DataverseCDMToSQL","type":"DataFlowReference","parameters":{"container":{"value":"'@{pipeline().parameters.container}'","type":"Expression"},"folder":{"value":"'@{pipeline().parameters.folder}'","type":"Expression"},"entity":{"value":"'@{item().name}'","type":"Expression"}},"datasetParameters":{"CDMEntity":{},"getMaxVersion":{},"AzureSQLDB":{},"AzureSQLDBDeleteLog":{}}},"staging":{},"compute":{"coreCount":8,"computeType":"MemoryOptimized"},"traceLevel":"Fine"}}]}}]}}],"policy":{"elapsedTimeMetric":{},"cancelAfter":{}},"parameters":{"container":{"type":"string"},"folder":{"type":"string"}},"folder":{"name":"DataverseToLakeToSQL"},"annotations":[],"lastPublishTime":"2022-07-21T22:29:27Z"},"dependsOn":["[concat(variables('factoryId'), '/datasets/modelJson')]","[concat(variables('factoryId'), '/dataflows/DataverseCDMToSQL')]"]},{"name":"[concat(parameters('factoryName'), '/modelJson')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('AzureDataLakeStorage_devorg2_unq3cd674d243f4ec11811d0022480cd')]","type":"LinkedServiceReference"},"parameters":{"container":{"type":"string"},"folder":{"type":"string"}},"annotations":[],"type":"Json","typeProperties":{"location":{"type":"AzureBlobFSLocation","fileName":"model.json","folderPath":{"value":"@dataset().folder","type":"Expression"},"fileSystem":{"value":"@dataset().container","type":"Expression"}}},"schema":{}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/DataverseCDMToSQL')]","type":"Microsoft.DataFactory/factories/dataflows","apiVersion":"2018-06-01","properties":{"description":"Data flow which reads CDM entity, transforms the data and move the data to destination SQL DB","type":"MappingDataFlow","typeProperties":{"sources":[{"linkedService":{"referenceName":"[parameters('AzureDataLakeStorage_devorg2_unq3cd674d243f4ec11811d0022480cd')]","type":"LinkedServiceReference"},"name":"CDMEntity"},{"linkedService":{"referenceName":"[parameters('AzureSqlDatabaseSALabDataverseSQL')]","type":"LinkedServiceReference"},"name":"getMaxVersion"}],"sinks":[{"linkedService":{"referenceName":"[parameters('AzureSqlDatabaseSALabDataverseSQL')]","type":"LinkedServiceReference"},"name":"AzureSQLDB"},{"linkedService":{"referenceName":"[parameters('AzureSqlDatabaseSALabDataverseSQL')]","type":"LinkedServiceReference"},"name":"AzureSQLDBDeleteLog"}],"transformations":[{"name":"IdentifyColumns"},{"name":"AlterRow"},{"name":"rank"},{"name":"dedup"},{"name":"filterolders"},{"name":"filterdeletedrows"},{"name":"addentityname"},{"name":"selectdeletelogcolumns"}],"scriptLines":["parameters{","     container as string,","     folder as string,","     entity as string","}","source(allowSchemaDrift: true,","     validateSchema: false,","     inferDriftedColumnTypes: true,","     ignoreNoFilesFound: true,","     entity: ($entity),","     format: 'cdm',","     manifestType: 'model',","     folderPath: ($folder),","     fileSystem: ($container),","     dateFormats: ['MM/dd/yyyy','yyyy-MM-dd'],","     timestampFormats: ['MM/dd/yyyy hh:mm:ss a','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','MM/dd/yyyy HH:mm:ss','yyyy-MM-dd\\'T\\'HH:mm:ss']) ~> CDMEntity","source(output(","          maxversion as integer","     ),","     allowSchemaDrift: true,","     validateSchema: false,","     format: 'query',","     store: 'sqlserver',","     query: (\"select max(versionnumber) as maxversion from dbo.\" + $entity ),","     isolationLevel: 'READ_UNCOMMITTED') ~> getMaxVersion","CDMEntity derive(Id = toString(byName(\"Id\")),","          versionnumber = toLong(byName(\"versionnumber\")),","          IsDelete = toBoolean(byName(\"IsDelete\")),","          SinkModifiedOn = toTimestamp(byName(\"SinkModifiedOn\"))) ~> IdentifyColumns","filterolders alterRow(deleteIf(IsDelete==true()),","     upsertIf(isNull(IsDelete)||IsDelete==false())) ~> AlterRow","IdentifyColumns window(over(Id),","     desc(Id, false),","     desc(versionnumber, false),","     {_RowVersion} = denseRank()) ~> rank","rank filter(toLong(byName(\"_RowVersion\"))==1) ~> dedup","dedup, getMaxVersion join(versionnumber > maxversion,","     joinType:'left',","     matchType:'exact',","     ignoreSpaces: false,","     broadcast: 'right')~> filterolders","filterolders filter(IsDelete==true()) ~> filterdeletedrows","filterdeletedrows derive(EntityName = $entity) ~> addentityname","addentityname select(mapColumn(","          EntityName,","          RecordId = Id,","          SinkDeleteTime = SinkModifiedOn,","          VersionNumber = versionnumber","     ),","     skipDuplicateMapInputs: false,","     skipDuplicateMapOutputs: true) ~> selectdeletelogcolumns","AlterRow sink(allowSchemaDrift: true,","     validateSchema: false,","     format: 'table',","     store: 'sqlserver',","     schemaName: 'dbo',","     tableName: ($entity),","     insertable: true,","     updateable: false,","     deletable: true,","     upsertable: true,","     keys:['id'],","     skipDuplicateMapInputs: true,","     skipDuplicateMapOutputs: true,","     errorHandlingOption: 'stopOnFirstError') ~> AzureSQLDB","selectdeletelogcolumns sink(allowSchemaDrift: true,","     validateSchema: false,","     format: 'table',","     store: 'sqlserver',","     schemaName: 'dbo',","     tableName: 'DeleteLog',","     insertable: true,","     updateable: false,","     deletable: false,","     upsertable: false,","     skipDuplicateMapInputs: true,","     skipDuplicateMapOutputs: true,","     errorHandlingOption: 'stopOnFirstError') ~> AzureSQLDBDeleteLog"]}},"dependsOn":[]}]}
