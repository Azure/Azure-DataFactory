{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"PerlovskyBlob": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/GenericSCDType2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenericSCD",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "GenericSCDType2",
								"type": "DataFlowReference",
								"parameters": {
									"Id": "'Player'",
									"Columns": "'Pos,Age,Tm'",
									"SinkPattern": "'nba-dim[n].csv'"
								},
								"datasetParameters": {
									"GenericInput": {
										"Folder": "nba/dimension"
									},
									"ExistingData": {
										"Folder": "output/nba-dim"
									},
									"FinalSink": {
										"Folder": "output/nba-dim2"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"folder": {
					"name": "GenericSCD"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/GenericSCDType2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericSCDType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GenericSCD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GenericDataset",
								"type": "DatasetReference"
							},
							"name": "GenericInput"
						},
						{
							"dataset": {
								"referenceName": "GenericDataset",
								"type": "DatasetReference"
							},
							"name": "ExistingData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GenericDataset",
								"type": "DatasetReference"
							},
							"name": "FinalSink"
						}
					],
					"transformations": [
						{
							"name": "NewAndUpdatedRows"
						},
						{
							"name": "AddHashInput"
						},
						{
							"name": "AddHashExisting"
						},
						{
							"name": "GetMaxSurrogateKey"
						},
						{
							"name": "AddKey"
						},
						{
							"name": "JoinWithMaxSurrogateKey"
						},
						{
							"name": "AddDimensionColumns"
						},
						{
							"name": "LookupUpdatedValues"
						},
						{
							"name": "UpdatedObsolete"
						},
						{
							"name": "DropUnwantedColsInput"
						},
						{
							"name": "DropUnwantedExisting"
						},
						{
							"name": "UnionAllData"
						}
					],
					"script": "parameters{\n\tId as string ('Player'),\n\tColumns as string ('Pos,Age,Tm'),\n\tSinkPattern as string ('nba-dim[n].csv')\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> GenericInput\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> ExistingData\nAddHashInput, AddHashExisting exists(AddHashInput@id_hash == AddHashExisting@id_hash\n\t&& AddHashInput@columns_hash == AddHashExisting@columns_hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewAndUpdatedRows\nGenericInput derive(id_hash = md5(byNames(split($Id,','))),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashInput\nExistingData derive(id_hash = md5(byNames(split($Id,','))),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashExisting\nAddHashExisting aggregate(MaxSurrogateKey = max(toInteger(byName('Key')))) ~> GetMaxSurrogateKey\nNewAndUpdatedRows keyGenerate(output(Key as long),\n\tstartAt: 1L) ~> AddKey\nAddKey, GetMaxSurrogateKey join(Key == MaxSurrogateKey || true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinWithMaxSurrogateKey\nJoinWithMaxSurrogateKey derive(Key = toString(Key + MaxSurrogateKey),\n\t\tActive = 1,\n\t\tActiveStartTime = toString(currentUTC()),\n\t\tActiveEndTime = toString(null())) ~> AddDimensionColumns\nAddHashExisting, NewAndUpdatedRows lookup(AddHashExisting@id_hash == AddHashInput@id_hash,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupUpdatedValues\nLookupUpdatedValues derive(Active = iif(isMatch(), 0, 1),\n\t\tActiveEndTime = iif(isMatch(), toString(currentUTC()),  toString(byName('ActiveEndTime')))) ~> UpdatedObsolete\nAddDimensionColumns select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColsInput\nUpdatedObsolete select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)&&stream!='NewAndUpdatedRows'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedExisting\nDropUnwantedExisting, DropUnwantedColsInput union(byName: true)~> UnionAllData\nUnionAllData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tfilePattern:($SinkPattern),\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FinalSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('PerlovskyBlob')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SCD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}