{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"EmployeeDataLinkedService": {
			"type": "string"
		},
		"LS_BLOB_KEY": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeDataPrep')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EmployeeDataPrepWranglingDataFlow",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EmployeeDataPrepWranglingDataFlow",
								"type": "DataFlowReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EmployeeDataPrepWranglingDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeDataPrepWranglingDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "EmployeeInfoDataset",
							"script": "",
							"dataset": {
								"referenceName": "EmployeeInfoDataset",
								"type": "DatasetReference"
							},
							"typeProperties": {
								"readMode": null
							}
						},
						{
							"name": "EmployeeSalaryDataset",
							"script": "",
							"dataset": {
								"referenceName": "EmployeeSalaryDataset",
								"type": "DatasetReference"
							},
							"typeProperties": {
								"readMode": null
							}
						}
					],
					"sinks": [
						{
							"name": "Sink1",
							"dataset": {
								"referenceName": "DS_SINK_KEY",
								"type": "DatasetReference"
							},
							"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SanitizedEmployeeData'],\n\ttruncate: true) ~> Sink1"
						}
					],
					"script": "section Section1;\r\nshared EmployeeInfoDataset = let\r\n  AdfDoc = AzureStorage.BlobContents(\"https://parask.blob.core.windows.net/wdf/EmployeeInfo.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]),\r\n  TrimmedHeaders = Table.TransformColumnNames(PromotedHeaders, (columnName as text) as text => Text.Trim(columnName))\r\nin\r\n  TrimmedHeaders;\r\nshared EmployeeSalaryDataset = let\r\n  AdfDoc = AzureStorage.BlobContents(\"https://parask.blob.core.windows.net/wdf/EmployeeSalary.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]),\r\n  TrimmedHeaders = Table.TransformColumnNames(PromotedHeaders, (columnName as text) as text => Text.Trim(columnName))\r\nin\r\n  TrimmedHeaders;\r\nshared UserQuery = let\r\n  Source = EmployeeInfoDataset,\r\n  JoinTransformation = Table.NestedJoin(Source, {\"EmployeeId\"}, EmployeeSalaryDataset, {\"EmployeeId\"}, \"EmployeeSalaryDataset\", JoinKind.Inner),\r\n  ExpandColumns = Table.ExpandTableColumn(JoinTransformation, \"EmployeeSalaryDataset\", {\"BasePay\"}, {\"EmployeeSalaryDataset.BasePay\"}),\r\n  RemoveColumns = Table.RemoveColumns(ExpandColumns, {\"EmployeeId\"}),\r\n  ReplacedQuotes = Table.ReplaceValue(RemoveColumns, \"\"\"\", \"\", Replacer.ReplaceText, {\"FirstName\", \"LastName\", \"City\", \"ZIP\", \"Email\", \"State\"}),\r\n  ConvertToNumber = Table.TransformColumnTypes(ReplacedQuotes, {{\"ZIP\", type number}}),\r\n  AddConditionColumnReplaceNullWithZero = Table.AddColumn(ConvertToNumber, \"SanitizedZip\", each if [ZIP] = null then 0 else [ZIP]),\r\n  #\"Removed columns\" = Table.RemoveColumns(AddConditionColumnReplaceNullWithZero, {\"ZIP\"}),\r\n  #\"Inserted conditional column\" = Table.AddColumn(#\"Removed columns\", \"SanitizedEmail\", each if not Text.Contains([Email], \"@\") then \"\" else if not Text.Contains([Email], \".\") then \"\" else [Email]),\r\n  RemoveEmailColumn = Table.RemoveColumns(#\"Inserted conditional column\", {\"Email\"}),\r\n  MergeColumn = Table.AddColumn(RemoveEmailColumn, \"Name\", each [FirstName] & \" \" & [LastName]),\r\n  RemoveFirstLastName = Table.RemoveColumns(MergeColumn, {\"FirstName\", \"LastName\"}),\r\n  ConvertToDate = Table.TransformColumnTypes(RemoveFirstLastName, {{\"DateOfJoining\", type date}}),\r\n  ConditionColumnEmpType = Table.AddColumn(ConvertToDate, \"EmployeeType\", each if [DateOfJoining] <= #date(2008, 2, 5) then \"Senior\" else \"Junior\"),\r\n  #\"Reordered columns\" = Table.ReorderColumns(ConditionColumnEmpType, {\"Name\", \"SanitizedEmail\", \"DateOfJoining\", \"EmployeeType\", \"EmployeeSalaryDataset.BasePay\", \"SanitizedZip\", \"City\", \"State\"}),\r\n  ConvertIdToNumber = Table.TransformColumnTypes(#\"Reordered columns\", {{\"EmployeeSalaryDataset.BasePay\", type number}}),\r\n  RemoveRowsWithEmptyEmail = Table.SelectRows(ConvertIdToNumber, each [SanitizedEmail] <> null and [SanitizedEmail] <> \"\"),\r\n  AverageSalaryByCity = Table.Group(RemoveRowsWithEmptyEmail, {\"City\"}, {{\"AverageSalary\", each List.Average([EmployeeSalaryDataset.BasePay]), type number}}),\r\n  #\"Filtered rows\" = Table.SelectRows(AverageSalaryByCity, each [AverageSalary] <= 200000)\r\nin\r\n  #\"Filtered rows\";\r\n"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmployeeInfoDataset')]",
				"[concat(variables('factoryId'), '/datasets/EmployeeSalaryDataset')]",
				"[concat(variables('factoryId'), '/datasets/DS_SINK_KEY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeInfoDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('EmployeeDataLinkedService')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EmployeeInfo.csv",
						"container": "wdf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeeId",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "ZIP",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "DateOfJoining",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeSalaryDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('EmployeeDataLinkedService')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EmployeeSalary.csv",
						"container": "wdf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeeId",
						"type": "String"
					},
					{
						"name": "BasePay",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SINK_KEY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('LS_BLOB_KEY')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string",
						"defaultValue": "wdfoutput"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}