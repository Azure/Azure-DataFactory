{"$schema":"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#","contentVersion":"1.0.0.0","parameters":{"workspaceName":{"type":"string","metadata":"Workspace name","defaultValue":"ona-synapse"},"Microsoft365":{"type":"string"},"MGDCSink":{"type":"string"}},"variables":{"workspaceId":"[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"},"resources":[{"name":"[concat(parameters('workspaceName'), '/ONA')]","type":"Microsoft.Synapse/workspaces/pipelines","apiVersion":"2019-06-01-preview","properties":{"activities":[{"name":"If GetUserData is true","type":"IfCondition","dependsOn":[{"activity":"Set User FolderName","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"expression":{"value":"@pipeline().parameters.GetUserData","type":"Expression"},"ifTrueActivities":[{"name":"Copy User","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"Office365Source","outputColumns":[{"name":"country"},{"name":"department"},{"name":"id"},{"name":"jobTitle"},{"name":"mail"},{"name":"preferredLanguage"},{"name":"state"}]},"sink":{"type":"BinarySink","storeSettings":{"type":"AzureBlobFSWriteSettings"}},"enableStaging":false},"inputs":[{"referenceName":"Microsoft365UserTable","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"UserSink","type":"DatasetReference","parameters":{"FolderName":{"value":"@variables('UserFolderName')","type":"Expression"}}}]}]}},{"name":"If GetEmailData is true","type":"IfCondition","dependsOn":[{"activity":"Set Email FolderName","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"expression":{"value":"@pipeline().parameters.GetEmailData","type":"Expression"},"ifTrueActivities":[{"name":"Copy Email","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"Office365Source","dateFilterColumn":"sentDateTime","startTime":{"value":"@formatDateTime(pipeline().parameters.StartDate)","type":"Expression"},"endTime":{"value":"@formatDateTime(pipeline().parameters.EndDate)","type":"Expression"},"outputColumns":[{"name":"receivedDateTime"},{"name":"sentDateTime"},{"name":"sender"},{"name":"from"},{"name":"toRecipients"},{"name":"ccRecipients"},{"name":"bccRecipients"},{"name":"conversationId"},{"name":"isRead"},{"name":"createdDateTime"},{"name":"id"},{"name":"conversationIndex"}]},"sink":{"type":"BinarySink","storeSettings":{"type":"AzureBlobFSWriteSettings"}},"enableStaging":false},"inputs":[{"referenceName":"Microsoft365EmailTable","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"EmailSink","type":"DatasetReference","parameters":{"FolderName":{"value":"@variables('EmailFolderName')","type":"Expression"}}}]}]}},{"name":"If GetTeamsChatData is true","type":"IfCondition","dependsOn":[{"activity":"Set TeamsChat FolderName","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"expression":{"value":"@pipeline().parameters.GetTeamsChatData","type":"Expression"},"ifTrueActivities":[{"name":"Copy TeamsChat","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"Office365Source","dateFilterColumn":"SentDateTime","startTime":{"value":"@formatDateTime(pipeline().parameters.StartDate)","type":"Expression"},"endTime":{"value":"@formatDateTime(pipeline().parameters.EndDate)","type":"Expression"},"outputColumns":[{"name":"Id"},{"name":"ReceivedDateTime"},{"name":"SentDateTime"},{"name":"InternetMessageId"},{"name":"ConversationId"},{"name":"ConversationIndex"},{"name":"Sender"},{"name":"From"},{"name":"ToRecipients"}]},"sink":{"type":"BinarySink","storeSettings":{"type":"AzureBlobFSWriteSettings"}},"enableStaging":false},"inputs":[{"referenceName":"Microsoft365TeamsChatTable","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"TeamsChatSink","type":"DatasetReference","parameters":{"FolderName":{"value":"@variables('TeamsChatFolderName')","type":"Expression"}}}]}]}},{"name":"If GetCalendarData is true","type":"IfCondition","dependsOn":[{"activity":"Set Calendar FileName","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"expression":{"value":"@pipeline().parameters.GetCalendarData","type":"Expression"},"ifTrueActivities":[{"name":"Copy Calendar","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"Office365Source","startTime":{"value":"@formatDateTime(pipeline().parameters.StartDate)","type":"Expression"},"endTime":{"value":"@formatDateTime(pipeline().parameters.EndDate)","type":"Expression"},"outputColumns":[{"name":"id"},{"name":"createdDateTime"},{"name":"iCalUId"},{"name":"start"},{"name":"end"},{"name":"isAllDay"},{"name":"isCancelled"},{"name":"attendees"},{"name":"organizer"}]},"sink":{"type":"BinarySink","storeSettings":{"type":"AzureBlobFSWriteSettings"}},"enableStaging":false},"inputs":[{"referenceName":"Microsoft365CalendarTable","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"CalendarSink","type":"DatasetReference","parameters":{"FolderName":{"value":"@variables('CalendarFolderName')","type":"Expression"}}}]}]}},{"name":"Run ONA Notebook","type":"SynapseNotebook","dependsOn":[{"activity":"Convert StorageUrl to Abfss Path","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"notebook":{"referenceName":"ONA","type":"NotebookReference"},"parameters":{"calendarPath":{"value":{"value":"@concat(variables('StorageAbfssPath'), variables('CalendarFolderName'))","type":"Expression"},"type":"string"},"emailPath":{"value":{"value":"@concat(variables('StorageAbfssPath'), variables('EmailFolderName'))\n","type":"Expression"},"type":"string"},"teamsChatPath":{"value":{"value":"@concat(variables('StorageAbfssPath'), variables('TeamsChatFolderName'))","type":"Expression"},"type":"string"},"userPath":{"value":{"value":"@concat(variables('StorageAbfssPath'), variables('UserFolderName'))","type":"Expression"},"type":"string"},"usersOutputPath":{"value":{"value":"@concat(replace(variables('StorageAbfssPath'),'mgdc@','output@'),'users_', pipeline().parameters.StartDate, '_to_', pipeline().parameters.EndDate, '.csv')","type":"Expression"},"type":"string"},"interactionsOutputPath":{"value":{"value":"@concat(replace(variables('StorageAbfssPath'),'mgdc@','output@'),'interactions_', pipeline().parameters.StartDate, '_to_', pipeline().parameters.EndDate, '.csv')","type":"Expression"},"type":"string"},"period":{"value":{"value":"@concat(pipeline().parameters.StartDate, ' to ', pipeline().parameters.EndDate)","type":"Expression"},"type":"string"},"obfuscateEmails":{"value":{"value":"@bool(1)","type":"Expression"},"type":"bool"}},"snapshot":true,"sparkPool":{"referenceName":"onasynapsepool","type":"BigDataPoolReference"},"executorSize":null,"conf":{"spark.dynamicAllocation.enabled":null,"spark.dynamicAllocation.minExecutors":null,"spark.dynamicAllocation.maxExecutors":null},"driverSize":null,"numExecutors":null}},{"name":"Set User FolderName","type":"SetVariable","dependsOn":[],"userProperties":[],"typeProperties":{"variableName":"UserFolderName","value":{"value":"@concat('user_', pipeline().parameters.StartDate, '_to_', pipeline().parameters.EndDate)","type":"Expression"}}},{"name":"Set Email FolderName","type":"SetVariable","dependsOn":[],"userProperties":[],"typeProperties":{"variableName":"EmailFolderName","value":{"value":"@concat('email_', pipeline().parameters.StartDate, '_to_', pipeline().parameters.EndDate)","type":"Expression"}}},{"name":"Set TeamsChat FolderName","type":"SetVariable","dependsOn":[],"userProperties":[],"typeProperties":{"variableName":"TeamsChatFolderName","value":{"value":"@concat('teamschat_', pipeline().parameters.StartDate, '_to_', pipeline().parameters.EndDate)","type":"Expression"}}},{"name":"Set Calendar FileName","type":"SetVariable","dependsOn":[],"userProperties":[],"typeProperties":{"variableName":"CalendarFolderName","value":{"value":"@concat('calendar_', pipeline().parameters.StartDate, '_to_', pipeline().parameters.EndDate)","type":"Expression"}}},{"name":"Convert StorageUrl to Abfss Path","type":"SetVariable","dependsOn":[{"activity":"If GetCalendarData is true","dependencyConditions":["Succeeded"]},{"activity":"If GetTeamsChatData is true","dependencyConditions":["Succeeded"]},{"activity":"If GetEmailData is true","dependencyConditions":["Succeeded"]},{"activity":"If GetUserData is true","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"variableName":"StorageAbfssPath","value":{"value":"@concat(replace(replace(trim(pipeline().parameters.StorageUrl), 'https://', 'abfss://mgdc@'),'dfs.core.windows.net/','dfs.core.windows.net'),'/')\n","type":"Expression"}}}],"policy":{"elapsedTimeMetric":{},"cancelAfter":{}},"parameters":{"StartDate":{"type":"string"},"EndDate":{"type":"string"},"StorageUrl":{"type":"string","defaultValue":"https://<your-storage-account>.dfs.core.windows.net/"},"GetUserData":{"type":"bool","defaultValue":true},"GetEmailData":{"type":"bool","defaultValue":true},"GetCalendarData":{"type":"bool","defaultValue":true},"GetTeamsChatData":{"type":"bool","defaultValue":true}},"variables":{"CalendarFolderName":{"type":"String"},"EmailFolderName":{"type":"String"},"TeamsChatFolderName":{"type":"String"},"UserFolderName":{"type":"String"},"StorageAbfssPath":{"type":"String"}},"annotations":[],"lastPublishTime":"2022-11-28T23:52:04Z"},"dependsOn":["[concat(variables('workspaceId'), '/notebooks/ONA')]","[concat(variables('workspaceId'), '/bigDataPools/onasynapsepool')]","[concat(variables('workspaceId'), '/datasets/Microsoft365UserTable')]","[concat(variables('workspaceId'), '/datasets/UserSink')]","[concat(variables('workspaceId'), '/datasets/Microsoft365EmailTable')]","[concat(variables('workspaceId'), '/datasets/EmailSink')]","[concat(variables('workspaceId'), '/datasets/Microsoft365TeamsChatTable')]","[concat(variables('workspaceId'), '/datasets/TeamsChatSink')]","[concat(variables('workspaceId'), '/datasets/Microsoft365CalendarTable')]","[concat(variables('workspaceId'), '/datasets/CalendarSink')]"]},{"name":"[concat(parameters('workspaceName'), '/ONA')]","type":"Microsoft.Synapse/workspaces/notebooks","apiVersion":"2019-06-01-preview","properties":{"nbformat":4,"nbformat_minor":2,"bigDataPool":{"referenceName":"onasynapsepool","type":"BigDataPoolReference"},"sessionProperties":{"driverMemory":"28g","driverCores":4,"executorMemory":"28g","executorCores":4,"numExecutors":2,"runAsWorkspaceSystemIdentity":false,"conf":{"spark.dynamicAllocation.enabled":"false","spark.dynamicAllocation.minExecutors":"2","spark.dynamicAllocation.maxExecutors":"2","spark.autotune.trackingId":"cc11a136-c31b-46da-bc37-cd678ef66a73"}},"metadata":{"saveOutput":true,"synapse_widget":{"version":"0.1","state":{}},"enableDebugMode":false,"kernelspec":{"name":"synapse_pyspark","display_name":"Synapse PySpark"},"language_info":{"name":"python"},"a365ComputeOptions":{"id":"/subscriptions/30a81c99-6121-40ba-99d7-ac674961cd7e/resourceGroups/rg-mgdc-ona/providers/Microsoft.Synapse/workspaces/ona-synapse/bigDataPools/onasynapsepool","name":"onasynapsepool","type":"Spark","endpoint":"https://ona-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/onasynapsepool","auth":{"type":"AAD","authResource":"https://dev.azuresynapse.net","authHeader":null},"sparkVersion":"3.2","nodeCount":3,"cores":4,"memory":28,"extraHeader":null},"sessionKeepAliveTimeout":30},"cells":[{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"tags":["parameters"]},"source":["# Default parameters that can be freely changed or overriden by pipeline run \r\n","\r\n","# Inputs\r\n","calendarPath = \"abfss://mgdc@onastorage.dfs.core.windows.net/calendar_2022-06-01_to_2022-11-07/\"\r\n","emailPath = \"abfss://mgdc@onastorage.dfs.core.windows.net/email_2022-06-01_to_2022-11-07/\"\r\n","teamsChatPath = \"abfss://mgdc@onastorage.dfs.core.windows.net/teamschat_2022-06-01_to_2022-11-07/\"\r\n","userPath = \"abfss://mgdc@onastorage.dfs.core.windows.net/user_2022-06-01_to_2022-11-07/\"\r\n","\r\n","# Output path of user vertices\r\n","usersOutputPath = \"abfss://output@onastorage.dfs.core.windows.net/users_2022-06-01_to_2022-11-07.csv\"\r\n","\r\n","# Output path of user to user edges\r\n","interactionsOutputPath = \"abfss://output@onastorage.dfs.core.windows.net/interactions_2022-06-01_to_2022-11-07.csv\"\r\n","\r\n","# StartDate/EndDate for this run that is denormalized to users and interactions tables\r\n","period = \"2022-06-01 to 2022-11-07\"\r\n","\r\n","# Whether or not to md5 hash the input user emails\r\n","obfuscateEmails = True"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":1,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.1743091Z","session_start_time":"2022-11-30T22:46:04.2283616Z","execution_start_time":"2022-11-30T22:50:17.3791143Z","execution_finish_time":"2022-11-30T22:50:17.5476985Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 1, Finished, Available)"},"metadata":{}}],"execution_count":1},{"cell_type":"code","metadata":{"microsoft":{},"collapsed":false},"source":["# Load data\r\n","meetingsRaw = spark.read.json(calendarPath)\r\n","emailsRaw = spark.read.json(emailPath)\r\n","teamschatsRaw = spark.read.json(teamsChatPath)\r\n","usersRaw = spark.read.json(userPath)"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":2,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.1802223Z","session_start_time":null,"execution_start_time":"2022-11-30T22:50:17.6781024Z","execution_finish_time":"2022-11-30T22:50:47.1719331Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 2, Finished, Available)"},"metadata":{}}],"execution_count":2},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["# Drop duplicates\r\n","usersDedup = usersRaw.dropDuplicates([\"puser\"])\r\n","emailsDedup = emailsRaw.dropDuplicates([\"Id\"]).select(\"Sender\", \"ToRecipients\")\r\n","teamschatsDedup = teamschatsRaw.dropDuplicates([\"Id\"]).select(\"Sender\", \"ToRecipients\")\r\n","meetingsDedup = meetingsRaw.dropDuplicates([\"Id\"]).select(\"organizer\", \"attendees\")"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":3,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.1819501Z","session_start_time":null,"execution_start_time":"2022-11-30T22:50:47.3342332Z","execution_finish_time":"2022-11-30T22:50:47.4977512Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 3, Finished, Available)"},"metadata":{}}],"execution_count":3},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["from pyspark.sql.functions import coalesce, col, count, explode, format_number, isnull, lit, md5, rand, size, udf\r\n","import pyspark.sql.functions as F\r\n","from pyspark.sql import types as t"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":4,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.1848629Z","session_start_time":null,"execution_start_time":"2022-11-30T22:50:47.6316925Z","execution_finish_time":"2022-11-30T22:50:47.7980828Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 4, Finished, Available)"},"metadata":{}}],"execution_count":4},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["# Get the user email addresses and filter emails, teamschat, and meetings to only contain edges with those users\r\n","usersEmailAddresses = usersDedup.selectExpr(\"lower(mail) as id\")"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":5,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.1896033Z","session_start_time":null,"execution_start_time":"2022-11-30T22:50:47.9360192Z","execution_finish_time":"2022-11-30T22:50:48.1820682Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 5, Finished, Available)"},"metadata":{}}],"execution_count":5},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["# Explode row with one sender -> N recipients into N rows\r\n","# Filter to only keep emails with 5 or less recipients\r\n","emails = emailsDedup.where(size(col(\"ToRecipients\")) <= 5) \\\r\n","                    .select(F.lower(col(\"Sender.EmailAddress.Address\")).alias(\"sender\"), explode(col(\"ToRecipients\")).alias(\"exploded\")) \\\r\n","                    .join(usersEmailAddresses, col(\"id\") == col(\"sender\"), \"inner\").drop(\"id\") \\\r\n","                    .join(usersEmailAddresses, col(\"id\") == F.lower(col(\"exploded.EmailAddress.Address\")), \"inner\").drop(\"id\") \\\r\n","                    .withColumn(\"src\", col(\"sender\")) \\\r\n","                    .withColumn(\"dst\", F.lower(col(\"exploded.EmailAddress.Address\"))) \\\r\n","                    .select(col(\"src\"), col(\"dst\")) \\\r\n","                    .where(col(\"src\") != col(\"dst\"))\r\n","if obfuscateEmails:\r\n","    emails = emails.withColumn(\"srcHash\", md5(col(\"src\"))) \\\r\n","                   .withColumn(\"dstHash\", md5(col(\"dst\"))) \\\r\n","                   .drop(\"src\", \"dst\").selectExpr(\"srcHash as src\", \"dstHash as dst\")"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":6,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.1940106Z","session_start_time":null,"execution_start_time":"2022-11-30T22:50:48.3205205Z","execution_finish_time":"2022-11-30T22:50:48.915289Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 6, Finished, Available)"},"metadata":{}}],"execution_count":6},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["# Explode row with one sender -> N recipients into N rows\r\n","# Filter to only keep teamschat messages with 5 or less recipients\r\n","teamschats = teamschatsDedup.where(size(col(\"ToRecipients\")) <= 5) \\\r\n","                            .select(F.lower(col(\"Sender.EmailAddress.Address\")).alias(\"sender\"), explode(col(\"ToRecipients\")).alias(\"exploded\")) \\\r\n","                            .join(usersEmailAddresses, col(\"id\") == col(\"sender\"), \"inner\").drop(\"id\") \\\r\n","                            .join(usersEmailAddresses, col(\"id\") == F.lower(col(\"exploded.EmailAddress.Address\")), \"inner\").drop(\"id\") \\\r\n","                            .withColumn(\"src\", col(\"sender\")) \\\r\n","                            .withColumn(\"dst\", F.lower(col(\"exploded.EmailAddress.Address\"))) \\\r\n","                            .select(col(\"src\"), col(\"dst\")) \\\r\n","                            .where(col(\"src\") != col(\"dst\"))\r\n","if obfuscateEmails:\r\n","    teamschats = teamschats.withColumn(\"srcHash\", md5(col(\"src\"))) \\\r\n","                           .withColumn(\"dstHash\", md5(col(\"dst\"))) \\\r\n","                           .drop(\"src\", \"dst\").selectExpr(\"srcHash as src\", \"dstHash as dst\")"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":7,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.1962576Z","session_start_time":null,"execution_start_time":"2022-11-30T22:50:49.104976Z","execution_finish_time":"2022-11-30T22:50:49.2905129Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 7, Finished, Available)"},"metadata":{}}],"execution_count":7},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["# Explode row with one organizer -> N attendees into N rows\r\n","# Filter to only keep meetings with 5 or less attendees\r\n","meetings = meetingsDedup.where(size(col(\"attendees\")) <= 5) \\\r\n","                        .select(F.lower(col(\"organizer.emailAddress.address\")).alias(\"sender\"), explode(col(\"attendees\")).alias(\"exploded\")) \\\r\n","                        .join(usersEmailAddresses, col(\"id\") == col(\"sender\"), \"inner\").drop(\"id\") \\\r\n","                        .join(usersEmailAddresses, col(\"id\") == F.lower(col(\"exploded.EmailAddress.Address\")), \"inner\").drop(\"id\") \\\r\n","                        .withColumn(\"src\", col(\"sender\")) \\\r\n","                        .withColumn(\"dst\", F.lower(col(\"exploded.EmailAddress.Address\"))) \\\r\n","                        .select(col(\"src\"), col(\"dst\")) \\\r\n","                        .where(col(\"src\") != col(\"dst\"))\r\n","if obfuscateEmails:\r\n","    meetings = meetings.withColumn(\"srcHash\", md5(col(\"src\"))) \\\r\n","                   .withColumn(\"dstHash\", md5(col(\"dst\"))) \\\r\n","                   .drop(\"src\", \"dst\").selectExpr(\"srcHash as src\", \"dstHash as dst\")"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":8,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.1986991Z","session_start_time":null,"execution_start_time":"2022-11-30T22:50:49.4298462Z","execution_finish_time":"2022-11-30T22:50:49.9878958Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 8, Finished, Available)"},"metadata":{}}],"execution_count":8},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["# Join after counting all email, teamsChat, meeting\r\n","emailEdges = emails.groupBy(\"src\", \"dst\").count().select(col(\"src\").alias(\"src1\"), col(\"dst\").alias(\"dst1\"), col(\"count\").alias(\"numEmail\"))\r\n","teamsChatEdges = teamschats.groupBy(\"src\", \"dst\").count().select(col(\"src\").alias(\"src2\"), col(\"dst\").alias(\"dst2\"), col(\"count\").alias(\"numTeamsChat\"))\r\n","meetingEdges = meetings.groupBy(\"src\", \"dst\").count().select(col(\"src\").alias(\"src3\"), col(\"dst\").alias(\"dst3\"), col(\"count\").alias(\"numMeeting\"))\r\n","\r\n","allEdges = emailEdges.alias(\"e\").join(teamsChatEdges.alias(\"t\"), (col(\"src1\") == col(\"src2\")) & (col(\"dst1\") == col(\"dst2\")), \"full\") \\\r\n","                             .join(meetingEdges.alias(\"m\"), (col(\"src1\") == col(\"src3\")) & (col(\"dst1\") == col(\"dst3\")), \"full\")"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":9,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.2016283Z","session_start_time":null,"execution_start_time":"2022-11-30T22:50:50.1536444Z","execution_finish_time":"2022-11-30T22:50:50.7307386Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 9, Finished, Available)"},"metadata":{}}],"execution_count":9},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["# Coalesce together src/dst duplicate columns after join\r\n","teamsChatToEmailRatio = 8 # interaction ratio for teamschat to email\r\n","edgesRenamed = allEdges.select(\r\n","    coalesce( *[col(c) for c in [\"src1\", \"src2\", \"src3\"]]).alias(\"Source\"),\r\n","    coalesce( *[col(c) for c in [\"dst1\", \"dst2\", \"dst3\"]]).alias(\"Target\"),\r\n","    col(\"numEmail\").alias(\"InteractionsEmail\"),\r\n","    col(\"numTeamsChat\").alias(\"InteractionsMeetings\"),\r\n","    col(\"numMeeting\").alias(\"InteractionsTeamsChat\")\r\n",").fillna(0) \\\r\n"," .withColumn(\"Interactions\", (col(\"InteractionsEmail\") + col(\"InteractionsMeetings\") + F.round(col(\"InteractionsTeamsChat\")/8.0)).cast('int')) \\\r\n"," .withColumn(\"Period\", lit(period))\r\n","edgesRenamed.coalesce(1).write.option(\"header\", True).mode(\"overwrite\").csv(interactionsOutputPath)"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":10,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.2046511Z","session_start_time":null,"execution_start_time":"2022-11-30T22:50:50.862753Z","execution_finish_time":"2022-11-30T22:51:06.0578738Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 10, Finished, Available)"},"metadata":{}}],"execution_count":10},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["eventsOrganized = meetings.groupBy(\"src\").count().withColumnRenamed(\"count\", \"NumberOfEventsOrganized\")\r\n","eventsAttended = meetings.groupBy(\"dst\").count().withColumnRenamed(\"count\", \"NumberOfEventsAttended\")\r\n","emailsSent = emails.groupBy(\"src\").count().withColumnRenamed(\"count\", \"NumberOfEmailsSent\")\r\n","emailsReceived = emails.groupBy(\"dst\").count().withColumnRenamed(\"count\", \"NumberOfEmailsReceived\")\r\n","teamsChatsSent = teamschats.groupBy(\"src\").count().withColumnRenamed(\"count\", \"NumberOfChatsSent\")\r\n","teamsChatsReceived = teamschats.groupBy(\"dst\").count().withColumnRenamed(\"count\", \"NumberOfChatsReceived\")"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":11,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.2091768Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:06.1952799Z","execution_finish_time":"2022-11-30T22:51:06.3629801Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 11, Finished, Available)"},"metadata":{}}],"execution_count":11},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["# Select user properties for output and join all raw email/teamschat/meeting counts\r\n","if obfuscateEmails:\r\n","    usersDedup = usersDedup.withColumn(\"EmailAddress\",  md5(F.lower(col(\"mail\"))))\r\n","else:\r\n","    usersDedup = usersDedup.withColumn(\"EmailAddress\", F.lower(col(\"mail\")))\r\n","usersRenamed = usersDedup.selectExpr(\"EmailAddress\", \"department as Department\", \"jobTitle as Title\", \"state as StateOrProvince\",\r\n","                                     \"country as Country\",\"preferredLanguage as Languages\",\"ptenant as TenantID\")\r\n","usersJoined = usersRenamed.join(eventsOrganized, col(\"src\") == col(\"EmailAddress\"), \"left\").drop(\"src\") \\\r\n","                          .join(eventsAttended, col(\"dst\") == col(\"EmailAddress\"), \"left\").drop(\"dst\") \\\r\n","                          .join(emailsSent, col(\"src\") == col(\"EmailAddress\"), \"left\").drop(\"src\") \\\r\n","                          .join(emailsReceived, col(\"dst\") == col(\"EmailAddress\"), \"left\").drop(\"dst\") \\\r\n","                          .join(teamsChatsSent, col(\"src\") == col(\"EmailAddress\"), \"left\").drop(\"src\") \\\r\n","                          .join(teamsChatsReceived, col(\"dst\") == col(\"EmailAddress\"), \"left\").drop(\"dst\") \\\r\n","                          .fillna(0)\r\n","numUsers = usersJoined.count()"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":12,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.2117127Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:06.5017997Z","execution_finish_time":"2022-11-30T22:51:18.1441075Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 12, Finished, Available)"},"metadata":{}}],"execution_count":12},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["# Calculate out-degrees and in-degrees based on number of connections\r\n","outDegreeEdges = edgesRenamed.where(col(\"Interactions\") > 0).groupBy(\"Source\").count().select(col(\"Source\"), col(\"count\").alias(\"Out-DegreeIndex\"))\r\n","inDegreeEdges = edgesRenamed.where(col(\"Interactions\") > 0).groupBy(\"Target\").count().select(col(\"Target\"), col(\"count\").alias(\"In-DegreeIndex\"))"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":13,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.2153469Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:18.2882212Z","execution_finish_time":"2022-11-30T22:51:18.8517319Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 13, Finished, Available)"},"metadata":{}}],"execution_count":13},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["# Construct networkx graph object\r\n","import networkx as nx\r\n","edges = edgesRenamed.selectExpr(\"Source as src\", \"Target as dst\")\r\n","edgesList = [(e.src, e.dst) for e in edges.collect()]\r\n","graph = nx.DiGraph()\r\n","graph.add_edges_from(edgesList)"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":14,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.2179395Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:18.9812127Z","execution_finish_time":"2022-11-30T22:51:30.2822304Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 14, Finished, Available)"},"metadata":{}}],"execution_count":14},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["# Calculate Influence Index based on page rank\r\n","graphPageRank = nx.pagerank(graph, alpha=0.85, personalization=None, max_iter=100, tol=0.001, nstart=None, weight=None, dangling=None)"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":15,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.2207787Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:30.4363413Z","execution_finish_time":"2022-11-30T22:51:30.9314612Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 15, Finished, Available)"},"metadata":{}}],"execution_count":15},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["# Define udf for adding page rank to dataframe\r\n","def getPageRank(x):\r\n","    return graphPageRank.get(x)\r\n","influenceIndexUdf = udf(getPageRank, t.FloatType())"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":16,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:04.2232593Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:31.0707143Z","execution_finish_time":"2022-11-30T22:51:31.251003Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 16, Finished, Available)"},"metadata":{}}],"execution_count":16},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["# Calculate Betweeness Index\r\n","# Commented out since the complexity is O(EV) where E = edges, V = vertices\r\n","# This will be slow for larger graphs, roughly above 10K users\r\n","# graphBetweenness = nx.betweenness_centrality(graph)"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":17,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:05.8252644Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:31.3831706Z","execution_finish_time":"2022-11-30T22:51:31.5586691Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 17, Finished, Available)"},"metadata":{}}],"execution_count":17},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["# Define udf for adding betweeness to dataframe\r\n","# def getBetweeness(x):\r\n","#     return graphBetweenness.get(x)\r\n","# betweenessIndexUdf = udf(getBetweeness, t.FloatType())"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":18,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:07.0718338Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:31.7142501Z","execution_finish_time":"2022-11-30T22:51:31.8897485Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 18, Finished, Available)"},"metadata":{}}],"execution_count":18},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["# Calculate Community Bridging Index\r\n","from networkx.algorithms import community\r\n","\r\n","# Get community partitions and map all nodes to a community index\r\n","communities = community.asyn_lpa_communities(graph, weight=None, seed=None)\r\n","labelsMap = {}\r\n","label = 0\r\n","for comm in communities:\r\n","    for node in comm:\r\n","        labelsMap[node] = str(label)\r\n","    label += 1"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":19,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:07.3009351Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:32.0315102Z","execution_finish_time":"2022-11-30T22:51:32.2969943Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 19, Finished, Available)"},"metadata":{}}],"execution_count":19},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["# Construct udf for mapping users to community label\r\n","def getLabel(x):\r\n","    return labelsMap.get(x)\r\n","\r\n","labelUdf = udf(getLabel, t.StringType())"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":20,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:07.5180374Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:32.4253559Z","execution_finish_time":"2022-11-30T22:51:32.597849Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 20, Finished, Available)"},"metadata":{}}],"execution_count":20},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["# Counts how many communities C a user is connected to with an out edge, normalized by num of communities\r\n","# For all users, compute C / (num of Communities)\r\n","# 1 = they are connected to all communities\r\n","# 0 = they have no connections\r\n","\r\n","# enrich edges by mapping target dst node to community\r\n","edgesLabelled = edges.withColumn(\"Community\", labelUdf(col(\"dst\"))).drop(\"dst\").distinct()\r\n","\r\n","# group on src and count how many distinct community labelled targets each src has\r\n","communityBridging = edgesLabelled.groupBy(\"src\").count() \\\r\n","                                 .withColumn(\"CommunityBridgeIndex\", col(\"count\") / float(len(labelsMap))).drop(\"count\")"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":21,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:07.6750029Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:32.7315563Z","execution_finish_time":"2022-11-30T22:51:33.2884628Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 21, Finished, Available)"},"metadata":{}}],"execution_count":21},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["# Join all indexes to users and output\r\n","usersEnriched = usersJoined.join(outDegreeEdges, col(\"Source\") == col(\"EmailAddress\"), \"left\").drop(\"Source\") \\\r\n","                           .join(inDegreeEdges, col(\"Target\") == col(\"EmailAddress\"), \"left\").drop(\"Target\") \\\r\n","                           .fillna(0) \\\r\n","                           .withColumn(\"DegreeIndex\", (col(\"In-DegreeIndex\") + col(\"Out-DegreeIndex\")) / (2 * numUsers)) \\\r\n","                           .withColumn(\"Community\", labelUdf(col(\"EmailAddress\"))) \\\r\n","                           .join(communityBridging, col(\"src\") == col(\"EmailAddress\"), \"left\").drop(\"src\") \\\r\n","                           .withColumn(\"InfluenceIndex\", influenceIndexUdf(col(\"EmailAddress\"))) \\\r\n","                           .fillna(0) \\\r\n","                           .withColumn(\"Period\", lit(period))\r\n","usersEnriched.coalesce(1).write.option(\"header\", True).mode(\"overwrite\").csv(usersOutputPath)"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":"onasynapsepool","session_id":"99","statement_id":22,"state":"finished","livy_statement_state":"available","queued_time":"2022-11-30T22:46:07.8567142Z","session_start_time":null,"execution_start_time":"2022-11-30T22:51:33.427847Z","execution_finish_time":"2022-11-30T22:52:10.5691156Z","spark_jobs":null},"text/plain":"StatementMeta(onasynapsepool, 99, 22, Finished, Available)"},"metadata":{}}],"execution_count":22}]},"dependsOn":[]},{"name":"[concat(parameters('workspaceName'), '/onasynapsepool')]","type":"Microsoft.Synapse/workspaces/bigDataPools","apiVersion":"2019-06-01-preview","properties":{"autoPause":{"enabled":true,"delayInMinutes":15},"autoScale":{"enabled":true,"maxNodeCount":3,"minNodeCount":3},"nodeCount":3,"nodeSize":"Small","nodeSizeFamily":"MemoryOptimized","sparkVersion":"3.2","isComputeIsolationEnabled":false,"sessionLevelPackagesEnabled":true,"customLibraries":[],"annotations":[]},"dependsOn":[],"location":"eastus"},{"name":"[concat(parameters('workspaceName'), '/Microsoft365UserTable')]","type":"Microsoft.Synapse/workspaces/datasets","apiVersion":"2019-06-01-preview","properties":{"linkedServiceName":{"referenceName":"[parameters('Microsoft365')]","type":"LinkedServiceReference"},"annotations":[],"type":"Office365Table","schema":[],"typeProperties":{"tableName":"BasicDataSet_v0.User_v1"}},"dependsOn":[]},{"name":"[concat(parameters('workspaceName'), '/UserSink')]","type":"Microsoft.Synapse/workspaces/datasets","apiVersion":"2019-06-01-preview","properties":{"linkedServiceName":{"referenceName":"[parameters('MGDCSink')]","type":"LinkedServiceReference"},"parameters":{"FolderName":{"type":"string"}},"annotations":[],"type":"Binary","typeProperties":{"location":{"type":"AzureBlobFSLocation","folderPath":{"value":"@dataset().FolderName","type":"Expression"},"fileSystem":"mgdc"}}},"dependsOn":[]},{"name":"[concat(parameters('workspaceName'), '/Microsoft365EmailTable')]","type":"Microsoft.Synapse/workspaces/datasets","apiVersion":"2019-06-01-preview","properties":{"linkedServiceName":{"referenceName":"[parameters('Microsoft365')]","type":"LinkedServiceReference"},"annotations":[],"type":"Office365Table","schema":[],"typeProperties":{"tableName":"BasicDataSet_v0.Message_v1"}},"dependsOn":[]},{"name":"[concat(parameters('workspaceName'), '/EmailSink')]","type":"Microsoft.Synapse/workspaces/datasets","apiVersion":"2019-06-01-preview","properties":{"linkedServiceName":{"referenceName":"[parameters('MGDCSink')]","type":"LinkedServiceReference"},"parameters":{"FolderName":{"type":"string"}},"annotations":[],"type":"Binary","typeProperties":{"location":{"type":"AzureBlobFSLocation","folderPath":{"value":"@dataset().FolderName","type":"Expression"},"fileSystem":"mgdc"}}},"dependsOn":[]},{"name":"[concat(parameters('workspaceName'), '/Microsoft365TeamsChatTable')]","type":"Microsoft.Synapse/workspaces/datasets","apiVersion":"2019-06-01-preview","properties":{"linkedServiceName":{"referenceName":"[parameters('Microsoft365')]","type":"LinkedServiceReference"},"annotations":[],"type":"Office365Table","schema":[],"typeProperties":{"tableName":"BasicDataSet_v0.TeamChat_v1"}},"dependsOn":[]},{"name":"[concat(parameters('workspaceName'), '/TeamsChatSink')]","type":"Microsoft.Synapse/workspaces/datasets","apiVersion":"2019-06-01-preview","properties":{"linkedServiceName":{"referenceName":"[parameters('MGDCSink')]","type":"LinkedServiceReference"},"parameters":{"FolderName":{"type":"string"}},"annotations":[],"type":"Binary","typeProperties":{"location":{"type":"AzureBlobFSLocation","folderPath":{"value":"@dataset().FolderName","type":"Expression"},"fileSystem":"mgdc"}}},"dependsOn":[]},{"name":"[concat(parameters('workspaceName'), '/Microsoft365CalendarTable')]","type":"Microsoft.Synapse/workspaces/datasets","apiVersion":"2019-06-01-preview","properties":{"linkedServiceName":{"referenceName":"[parameters('Microsoft365')]","type":"LinkedServiceReference"},"annotations":[],"type":"Office365Table","schema":[],"typeProperties":{"tableName":"BasicDataSet_v0.CalendarView_v0"}},"dependsOn":[]},{"name":"[concat(parameters('workspaceName'), '/CalendarSink')]","type":"Microsoft.Synapse/workspaces/datasets","apiVersion":"2019-06-01-preview","properties":{"linkedServiceName":{"referenceName":"[parameters('MGDCSink')]","type":"LinkedServiceReference"},"parameters":{"FolderName":{"type":"string"}},"annotations":[],"type":"Binary","typeProperties":{"location":{"type":"AzureBlobFSLocation","folderPath":{"value":"@dataset().FolderName","type":"Expression"},"fileSystem":"mgdc"}}},"dependsOn":[]},{"name":"[concat(parameters('workspaceName'), '/default')]","type":"Microsoft.Synapse/workspaces/managedVirtualNetworks","apiVersion":"2019-06-01-preview","properties":{},"dependsOn":[]}]}