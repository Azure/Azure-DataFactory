{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name"
        },
        "adfStorage": {
            "type": "string"
        },
        "AzureCogServices_Language": {
            "type": "string"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/PII detection and masking')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Use this template to detect and mask PII data with dataflow transformations.",
                "activities": [
                    {
                        "name": "PII_Dataflow",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "PII detection and masking",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "sourceFileSystem": "'sourceFileSystem'",
                                    "sourceFilePath": "'sourceFilePath'",
                                    "sourceFileName": "'sourceFileName'"
                                },
                                "datasetParameters": {
                                    "dataSource": {},
                                    "sink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "None",
                            "cacheSinks": {
                                "firstRowOnly": true
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "annotations": [],
                "lastPublishTime": "2022-09-15T14:53:58Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/PII detection and masking')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PII detection and masking')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This dataflow will create the request body needed for Azure Cognitive Services and then use the external call transformation to detect and mask PII data with the Cognitive Services PII API. ",
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "linkedService": {
                                "referenceName": "[parameters('adfStorage')]",
                                "type": "LinkedServiceReference"
                            },
                            "name": "dataSource",
                            "description": "Import data from data source"
                        }
                    ],
                    "sinks": [
                        {
                            "name": "sink"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "createRequestBody",
                            "description": "Creating the columns 'kind, parameters, analysisInput, text'"
                        },
                        {
                            "name": "externalCallCogServices",
                            "linkedService": {
                                "referenceName": "[parameters('AzureCogServices_Language')]",
                                "type": "LinkedServiceReference"
                            }
                        },
                        {
                            "name": "flattenResults"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     sourceFileSystem as string ('sourceFileSystem'),",
                        "     sourceFilePath as string ('sourceFilePath'),",
                        "     sourceFileName as string ('sourceFileName')",
                        "}",
                        "source(output(",
                        "          case_month as string,",
                        "          res_state as string,",
                        "          state_fips_code as short,",
                        "          res_county as string,",
                        "          county_fips_code as string,",
                        "          age_group as string,",
                        "          sex as string,",
                        "          race as string,",
                        "          ethnicity as string,",
                        "          case_positive_specimen_interval as short,",
                        "          case_onset_interval as short,",
                        "          process as string,",
                        "          exposure_yn as string,",
                        "          current_status as string,",
                        "          symptom_status as string,",
                        "          hosp_yn as string,",
                        "          icu_yn as string,",
                        "          death_yn as string,",
                        "          underlying_conditions_yn as string,",
                        "          name as string,",
                        "          email as string,",
                        "          phone_number as string",
                        "     ),",
                        "     useSchema: false,",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false,",
                        "     format: 'delimited',",
                        "     fileSystem: ($sourceFileSystem),",
                        "     folderPath: ($sourceFilePath),",
                        "     fileName: ($sourceFileName),",
                        "     columnDelimiter: ',',",
                        "     escapeChar: '\\\\',",
                        "     quoteChar: '\\\"',",
                        "     columnNamesAsHeader: true) ~> dataSource",
                        "dataSource derive(kind = 'PiiEntityRecognition',",
                        "          parameters = @(modelVersion='latest'),",
                        "          analysisInput = @(documents=array(@(id=\"1\", language=\"en\", text=concatWS(', ', name,email,phone_number,case_month,res_state,res_county,age_group,sex,race,ethnicity,process,exposure_yn,current_status,symptom_status,hosp_yn,icu_yn,icu_yn,death_yn,underlying_conditions_yn)))),",
                        "          text = concatWS(', ', name,email,phone_number,case_month,res_state,res_county,age_group,sex,race,ethnicity,process,exposure_yn,current_status,symptom_status,hosp_yn,icu_yn,icu_yn,death_yn,underlying_conditions_yn)) ~> createRequestBody",
                        "createRequestBody call(mapColumn(",
                        "          kind,",
                        "          parameters,",
                        "          analysisInput",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     output(",
                        "          body as (kind as string, results as (documents as (redactedText as string, id as string, entities as (text as string, category as string, offset as integer, length as integer, confidenceScore as double)[])[]))",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     format: 'rest',",
                        "     store: 'restservice',",
                        "     timeout: 30,",
                        "     httpMethod: 'POST',",
                        "     entity: 'language/:analyze-text?api-version=2022-05-01',",
                        "     bodyColumnName: 'body',",
                        "     requestFormat: ['type' -> 'json'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> externalCallCogServices",
                        "externalCallCogServices foldDown(unroll(body.results.documents),",
                        "     mapColumn(",
                        "          redactedText = body.results.documents.redactedText,",
                        "          text",
                        "     ),",
                        "     skipDuplicateMapInputs: false,",
                        "     skipDuplicateMapOutputs: false) ~> flattenResults",
                        "flattenResults sink(validateSchema: false,",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     store: 'cache',",
                        "     format: 'inline',",
                        "     output: false,",
                        "     saveOrder: 1) ~> sink"
                    ]
                }
            },
            "dependsOn": []
        }
    ]
}
